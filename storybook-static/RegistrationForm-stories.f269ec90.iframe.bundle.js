(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[506],{"./app/components/RegistrationForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MockedRegistrationError:()=>MockedRegistrationError,MockedRegistrationSuccess:()=>MockedRegistrationSuccess,__namedExportsOrder:()=>__namedExportsOrder,default:()=>RegistrationForm_stories});var http=__webpack_require__("./node_modules/msw/lib/core/http.mjs"),HttpResponse=__webpack_require__("./node_modules/msw/lib/core/HttpResponse.mjs"),delay=__webpack_require__("./node_modules/msw/lib/core/delay.mjs"),jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const RegistrationForm=()=>{const[email,setEmail]=(0,react.useState)(""),[password,setPassword]=(0,react.useState)(""),[confirmPassword,setConfirmPassword]=(0,react.useState)(""),[message,setMessage]=(0,react.useState)("");return(0,jsx_runtime.jsxs)("form",{onSubmit:async event=>{event.preventDefault();try{const response=await fetch("https://your-api-endpoint/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email,password,confirmPassword})}),result=await response.json();response.ok?setMessage("Registration successful"):setMessage(result.error||"Registration failed. Please try again.")}catch(e){setMessage("Registration failed. Please try again.")}},children:[(0,jsx_runtime.jsxs)("label",{children:["Email:",(0,jsx_runtime.jsx)("input",{type:"email",value:email,onChange:e=>setEmail(e.target.value),"aria-label":"email"})]}),(0,jsx_runtime.jsxs)("label",{children:["Password:",(0,jsx_runtime.jsx)("input",{type:"password",value:password,onChange:e=>setPassword(e.target.value),"aria-label":"password"})]}),(0,jsx_runtime.jsxs)("label",{children:["Confirm Password:",(0,jsx_runtime.jsx)("input",{type:"password",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value),"aria-label":"confirm password"})]}),(0,jsx_runtime.jsx)("button",{type:"submit",children:"Register"}),message&&(0,jsx_runtime.jsx)("p",{children:message})]})};RegistrationForm.__docgenInfo={description:"",methods:[],displayName:"RegistrationForm"};var dist=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),jest_dist=__webpack_require__("./node_modules/@storybook/jest/dist/index.mjs");(0,__webpack_require__("./node_modules/msw-storybook-addon/dist/index.browser.js").n_)();const RegistrationForm_stories={component:RegistrationForm},SuccessResponse={message:"Registration successful"},ErrorResponse={error:"Registration failed. Please try again."},MockedRegistrationSuccess={parameters:{msw:{handlers:[http.L.post("https://your-api-endpoint/register",(()=>HttpResponse.c.json(SuccessResponse)))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByLabelText(/email/i),"user@example.com"),await dist.Q4.type(canvas.getByLabelText(/password/i),"password123"),await dist.Q4.type(canvas.getByLabelText(/confirm password/i),"password123"),await dist.Q4.click(canvas.getByRole("button",{name:/register/i})),await(0,jest_dist.E)(canvas.findByText(/registration successful/i)).resolves.toBeVisible()}},MockedRegistrationError={parameters:{msw:{handlers:[http.L.post("https://your-api-endpoint/register",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(ErrorResponse,{status:400}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByLabelText(/email/i),"user@example.com"),await dist.Q4.type(canvas.getByLabelText(/password/i),"password123"),await dist.Q4.type(canvas.getByLabelText(/confirm password/i),"password123"),await dist.Q4.click(canvas.getByRole("button",{name:/register/i})),await(0,jest_dist.E)(canvas.findByText(/registration failed/i)).resolves.toBeVisible()}},__namedExportsOrder=["MockedRegistrationSuccess","MockedRegistrationError"];MockedRegistrationSuccess.parameters={...MockedRegistrationSuccess.parameters,docs:{...MockedRegistrationSuccess.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.post("https://your-api-endpoint/register", () => {\n        return HttpResponse.json(SuccessResponse);\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Type into input fields\n    await userEvent.type(canvas.getByLabelText(/email/i), "user@example.com");\n    await userEvent.type(canvas.getByLabelText(/password/i), "password123");\n    await userEvent.type(canvas.getByLabelText(/confirm password/i), "password123");\n\n    // Click the submit button\n    await userEvent.click(canvas.getByRole("button", {\n      name: /register/i\n    }));\n\n    // Await the visibility of the success message\n    await expect(canvas.findByText(/registration successful/i)).resolves.toBeVisible();\n  }\n}',...MockedRegistrationSuccess.parameters?.docs?.source}}},MockedRegistrationError.parameters={...MockedRegistrationError.parameters,docs:{...MockedRegistrationError.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.post("https://your-api-endpoint/register", async () => {\n        await delay(800); // Simulate network delay\n        return new HttpResponse(ErrorResponse, {\n          status: 400\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Type into input fields\n    await userEvent.type(canvas.getByLabelText(/email/i), "user@example.com");\n    await userEvent.type(canvas.getByLabelText(/password/i), "password123");\n    await userEvent.type(canvas.getByLabelText(/confirm password/i), "password123");\n\n    // Click the submit button\n    await userEvent.click(canvas.getByRole("button", {\n      name: /register/i\n    }));\n\n    // Await the visibility of the error message\n    await expect(canvas.findByText(/registration failed/i)).resolves.toBeVisible();\n  }\n}',...MockedRegistrationError.parameters?.docs?.source}}}},"?4f7e":()=>{}}]);